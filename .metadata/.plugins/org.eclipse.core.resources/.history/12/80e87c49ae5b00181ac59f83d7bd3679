import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
  
  /** Method to set the blue to 0 */
  public void zeroBlue()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setBlue(0);
      }
    }
  }
  
  public void keepOnlyBlue()
  {
	 Pixel[][] pixels = this.getPixels2D();
	 for (Pixel[] rowArray : pixels)
	 {
	   for (Pixel pixelObj : rowArray)
	   {
	     pixelObj.setRed(0);
	     pixelObj.setGreen(0);
	   }
	 }
  }
  
  public void keepOnlyRed()
  {
	 Pixel[][] pixels = this.getPixels2D();
	 for (Pixel[] rowArray : pixels)
	 {
	   for (Pixel pixelObj : rowArray)
	   {
	     pixelObj.setBlue(0);
	     pixelObj.setGreen(0);
	   }
	 }
  }
  
  public void keepOnlyGreen()
  {
	 Pixel[][] pixels = this.getPixels2D();
	 for (Pixel[] rowArray : pixels)
	 {
	   for (Pixel pixelObj : rowArray)
	   {
	     pixelObj.setBlue(0);
	     pixelObj.setRed(0);
	   }
	 }
  }
  
  public void negate()
  {
	  Pixel[][] pixels = this.getPixels2D();
		 for (Pixel[] rowArray : pixels)
		 {
		   for (Pixel pixelObj : rowArray)
		   {
		     pixelObj.setRed(255 - pixelObj.getRed());
		     pixelObj.setGreen(255 - pixelObj.getGreen());
		     pixelObj.setBlue(255 - pixelObj.getBlue());
		   }
		 }
  }
  
  public void grayscale()
  {
	  Pixel[][] pixels = this.getPixels2D();
		 for (Pixel[] rowArray : pixels)
		 {
		   for (Pixel pixelObj : rowArray)
		   {
			 int avg = (pixelObj.getRed() + pixelObj.getGreen() + pixelObj.getBlue())/3;
		     pixelObj.setRed(avg);
		     pixelObj.setGreen(avg);
		     pixelObj.setBlue(avg);
		   }
		 }
  }
  
  public void fixUnderwater()
  {
	  Pixel[][] pixels = this.getPixels2D();
	    
	    int redAverage = 0;
	    int greenAverage = 0;
	    int blueAverage = 0;
	    int totalPixels = 0;
	    
	    int maxRed = 0;
	    int minRed = 255;
	    int maxGreen = 0;
	    int minGreen = 255;
	    int maxBlue = 0;
	    int minBlue = 255;
	    
	    for (int row = 26; row < 36; row++)
	    {
	        for (int col = 178; col < 198; col++)
	        {
	            totalPixels++;
	            
	            Pixel myPixel = pixels[row][col];
	            
	            redAverage += myPixel.getRed();
	            greenAverage += myPixel.getGreen();
	            blueAverage += myPixel.getBlue();
	            
	            if (myPixel.getRed() > maxRed) { maxRed = myPixel.getRed(); }
	            if (myPixel.getRed() < minRed) { minRed = myPixel.getRed(); }
	            if (myPixel.getGreen() > maxGreen) { maxGreen = myPixel.getGreen(); }
	            if (myPixel.getGreen() < minGreen) { minGreen = myPixel.getGreen(); }
	            if (myPixel.getBlue() > maxBlue) { maxBlue = myPixel.getBlue(); }
	            if (myPixel.getGreen() < minBlue) { minBlue = myPixel.getBlue(); }
	            
	        }
	    }
	    
	    redAverage = redAverage / totalPixels;
	    greenAverage = greenAverage / totalPixels;
	    blueAverage = blueAverage / totalPixels;
	    
	    Color averageColor = new Color(redAverage, greenAverage, blueAverage);
	    
	    int redRange = (maxRed - minRed);
	    int greenRange = (maxGreen - minGreen);
	    int blueRange = (maxBlue - minBlue);
	    
	    int redDistance = redRange;
	    int greenDistance = greenRange;
	    int blueDistance = blueRange;
	    
	    double maxDistance = Math.sqrt(redDistance * redDistance +
	                                   greenDistance * greenDistance +
	                                   blueDistance * blueDistance);
	    
	    double tolerance = 1.7;
	    
	    for (int row = 0; row < pixels.length; row++)
	    {
	      for (int col = 0; col < pixels[0].length; col++)
	      {
	          Pixel myPixel = pixels[row][col]; //
	          
	          boolean closeEnough = myPixel.colorDistance(averageColor) < maxDistance * tolerance; // stopped here, define this***
	          if (closeEnough)
	          {
	              myPixel.setBlue(myPixel.getBlue() + 50);
	          }
	          else
	          {
	              myPixel.setBlue(myPixel.getBlue() - 50);
	          }
	      }
	    }
  }
  
  /** Method that mirrors the picture around a 
    * vertical mirror in the center of the picture
    * from left to right */
  public void mirrorVertical()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int width = pixels[0].length;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; col < width / 2; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][width - 1 - col];
        rightPixel.setColor(leftPixel.getColor());
      }
    } 
  }
  
  /** Mirror just part of a picture of a temple */
  public void mirrorTemple()
  {
    int mirrorPoint = 276;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int count = 0;
    Pixel[][] pixels = this.getPixels2D();
    
    // loop through the rows
    for (int row = 27; row < 97; row++)
    {
      // loop from 13 to just before the mirror point
      for (int col = 13; col < mirrorPoint; col++)
      {
        
        leftPixel = pixels[row][col];      
        rightPixel = pixels[row]                       
                         [mirrorPoint - col + mirrorPoint];
        rightPixel.setColor(leftPixel.getColor());
        count++;
      }
    }
    System.out.println(count);
  }
  
  public void mirrorArms()
  {
	  int mirrorPoint = 193;
	    Pixel topPixel = null;
	    Pixel botPixel = null;
	    Pixel[][] pixels = this.getPixels2D();
	    
	    // loop through the rows
	    for (int row = 158; row < mirrorPoint; row++)
	    {
	      // loop from 13 to just before the mirror point
	      for (int col = 103; col < 170; col++)
	      {
	        
	        topPixel = pixels[row][col];      
	        botPixel = pixels[mirrorPoint - row + mirrorPoint][col];
	        botPixel.setColor(topPixel.getColor());
	      }
	    }
	  mirrorPoint = 198;
	  topPixel = null;
	  botPixel = null;
	  for (int row = 171; row < mirrorPoint; row++)
	    {
	      // loop from 13 to just before the mirror point
	      for (int col = 239; col < 294; col++)
	      {
	        
	        topPixel = pixels[row][col];      
	        botPixel = pixels[mirrorPoint - row + mirrorPoint][col];
	        botPixel.setColor(topPixel.getColor());
	      }
	    }
  }
  
  public void mirrorGull()
  {
	  int mirrorPoint = 345;
	    Pixel leftPixel = null;
	    Pixel rightPixel = null;
	    Pixel[][] pixels = this.getPixels2D();
	    
	    // loop through the rows
	    for (int row = 235; row < 323; row++)
	    {
	      // loop from 13 to just before the mirror point
	      for (int col = 238; col < mirrorPoint; col++)
	      {
	        
	        rightPixel = pixels[row][col];      
	        leftPixel = pixels[row]                       
	                         [mirrorPoint - col + mirrorPoint/3];
	        leftPixel.setColor(rightPixel.getColor());
	      }
	    }
	  
  }
  
  public void mirrorVerticalRightToLeft()
  {
	Pixel[][] pixels = this.getPixels2D();
	Pixel leftPixel = null;
	Pixel rightPixel = null;
	int width = pixels[0].length;
	for (int row = 0; row < pixels.length; row++)
	   {
	   for (int col = 0; col < width / 2; col++)
	      {
	      leftPixel = pixels[row][col];
	      rightPixel = pixels[row][width - 1 - col];
	      leftPixel.setColor(rightPixel.getColor());
	      }
	   } 
  }
  
  public void mirrorHorizontal()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  Pixel topPixel = null;
	  Pixel botPixel = null;
	  int height = pixels.length;
	  for (int row = 0; row < height; row++)
	   {
	   for (int col = 0; col < pixels[0].length; col++)
	      {
	      topPixel = pixels[row][col];
	      botPixel = pixels[height - 1 - row][col];
	      botPixel.setColor(topPixel.getColor());
	      }
	   } 
  }
  
  public void mirrorHorizontalBotToTop()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  Pixel topPixel = null;
	  Pixel botPixel = null;
	  int height = pixels.length;
	  for (int row = 0; row < height; row++)
	   {
	   for (int col = 0; col < pixels[0].length; col++)
	      {
	      topPixel = pixels[row][col];
	      botPixel = pixels[height - 1 - row][col];
	      topPixel.setColor(botPixel.getColor());
	      }
	   } 
  }
  
  public void mirrorDiagonal()
  {
	  Pixel[][] pixels = this.getPixels2D();
      Pixel topRightPixel = null;
      Pixel bottomLeftPixel = null;
      int maxLength;
      if (pixels.length < pixels[0].length) { maxLength = pixels.length; }
      else {maxLength = pixels[0].length; }
      
      for (int row = 0; row < maxLength; row++)
      {
          for (int col = row; col < maxLength; col++)
          {
              topRightPixel = pixels[row][col];
              bottomLeftPixel = pixels[col][row];
              topRightPixel.setColor(bottomLeftPixel.getColor());
          }
      }
  }
  
  /** copy from the passed fromPic to the
    * specified startRow and startCol in the
    * current picture
    * @param fromPic the picture to copy from
    * @param startRow the start row to copy to
    * @param startCol the start col to copy to
    */
  public void copy(Picture fromPic, 
                 int startRow, int startCol)
  {
    Pixel fromPixel = null;
    Pixel toPixel = null;
    Pixel[][] toPixels = this.getPixels2D();
    Pixel[][] fromPixels = fromPic.getPixels2D();
    for (int fromRow = 0, toRow = startRow; 
         fromRow < fromPixels.length &&
         toRow < toPixels.length; 
         fromRow++, toRow++)
    {
      for (int fromCol = 0, toCol = startCol; 
           fromCol < fromPixels[0].length &&
           toCol < toPixels[0].length;  
           fromCol++, toCol++)
      {
        fromPixel = fromPixels[fromRow][fromCol];
        toPixel = toPixels[toRow][toCol];
        toPixel.setColor(fromPixel.getColor());
      }
    }   
  }
  
  public void copy2(Picture fromPic, int startRow, int endRow, int startCol, int endCol)
  {
    Pixel fromPixel = null;
    Pixel toPixel = null;
    Pixel[][] toPixels = this.getPixels2D();
    Pixel[][] fromPixels = fromPic.getPixels2D();
    for (int fromRow = 0, toRow = startRow; 
         fromRow < fromPixels.length &&
         toRow < endRow;
         fromRow++, toRow++)
    {
      for (int fromCol = 0, toCol = startCol; 
           fromCol < fromPixels[0].length &&
           toCol < endCol;  
           fromCol++, toCol++)
      {
        fromPixel = fromPixels[fromRow][fromCol];
        toPixel = toPixels[toRow][toCol];
        toPixel.setColor(fromPixel.getColor());
        //System.out.println("Fromrow " + fromRow + " toRow " + toRow + " fromCol" + fromCol + " toCol " + toCol);
        //System.out.println(fromPixels[0].length);
      }
    } 
  }

  /** Method to create a collage of several pictures */
  public void createCollage()
  {
    Picture flower1 = new Picture("/Users/theandrealiu/Desktop/AP CSA/PicLab/src/images/flower1.jpg");
    Picture flower2 = new Picture("/Users/theandrealiu/Desktop/AP CSA/PicLab/src/images/flower2.jpg");
    this.copy(flower1,0,0);
    this.copy(flower2,100,0);
    this.copy(flower1,200,0);
    Picture flowerNoBlue = new Picture(flower2);
    flowerNoBlue.zeroBlue();
    this.copy(flowerNoBlue,300,0);
    this.copy(flower1,400,0);
    this.copy(flower2,500,0);
    this.mirrorVertical();
    this.write("/Users/theandrealiu/Desktop/AP CSA/PicLab/src/images/collage.jpg");
  }
 
  public void myCollage()
  {
	  Picture flower1 = new Picture("/Users/theandrealiu/Desktop/AP CSA/PicLab/src/images/flower1.jpg");
	    Picture flower2 = new Picture("/Users/theandrealiu/Desktop/AP CSA/PicLab/src/images/flower2.jpg");
	    Picture flowerNoBlue = new Picture(flower2);
      this.copy2(flower1,10,20, 0, 100);
      this.copy2(flower2,30,50, 0, 100);
      this.copy2(flower1,60,70, 0, 100);
      this.copy2(flower2,80,100, 0, 100);
      this.copy2(flower1,105,120, 0, 100);
      this.copy2(flower2,122,130, 0, 100);
      flowerNoBlue.zeroBlue();
	    this.copy2(flowerNoBlue,130,150,0,100);
	    this.copy2(flower1,160,190, 0, 100);
	      this.copy2(flower2,195,210, 0, 100);
	      this.copy2(flower1,215,230, 0, 100);
	      this.copy2(flower2,230,240, 0, 100);
	      this.copy2(flower1,250,270, 0, 100);
	      this.copy2(flower2,272,300, 0, 100);
	      flowerNoBlue.zeroBlue();
		    this.copy2(flowerNoBlue,310,350,0,100);
		    this.copy2(flower1,360,390, 0, 100);
		      this.copy2(flower2,395,410, 0, 100);
		      this.copy2(flower1,415,430, 0, 100);
		      this.copy2(flower2,430,440, 0, 100);
		      flowerNoBlue.zeroBlue();
			    this.copy2(flowerNoBlue,450,480,0,100);
	    this.mirrorVertical();
      this.write("/Users/theandrealiu/Desktop/AP CSA/PicLab/src/images/mycollage.jpg");
  }
  
  /** Method to show large changes in color 
    * @param edgeDist the distance for finding edges
    */
  public void edgeDetection(int edgeDist)
  {
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    Pixel topPixel = null;
    Pixel bottomPixel = null;
    
    Pixel[][] pixels = this.getPixels2D();
    for (int row = 0; row < pixels.length - 1; row++)
    {
      for (int col = 0; 
           col < pixels[0].length-1; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][col+1];
        topPixel = pixels[row][col];
        bottomPixel = pixels[row + 1][col];
        if (leftPixel.colorDistance(rightPixel.getColor()) > edgeDist ||
            topPixel.colorDistance(bottomPixel.getColor()) > edgeDist)
          leftPixel.setColor(Color.BLACK);
        else
          leftPixel.setColor(Color.WHITE);
      }
    }
  }
  
  public  void chromakey(Picture newBack){
	  int row;
	  int col;
	  printInfo();
	  Pixel[][] pixels = getPixels2D();
	  Pixel[][] pix = newBack.getPixels2D();
	    for (row = 0; row<pixels.length;row++)
	    {
	      for (col = 0; col<pixels[0].length; col++)
	      {
	    	  Pixel pixelObj = pixels[row][col];
	    	  Pixel newPixel = pix[row][col];
	        if (pixelObj.getBlue()>pixelObj.getRed()){
	        	pixelObj.setColor(Color.WHITE);
	        	pixelObj.setColor(newPixel.getColor());
	        }
	      }
	    }
  }
  public void printInfo(){
	  System.out.println("Andrea Liu\t Period 1\t Date: May 4, 2018 \tComputer Number 17");
  }
  
  /** Hide a black and white message in the current
  * picture by changing the red to even and then
  * setting it to odd if the message pixel is black
  * @param messagePict the picture with a message
  */
  /*public void encode(Picture messagePict)
  {
  Pixel[][] messagePixels = messagePict.getPixels2D();
  Pixel[][] currPixels = this.getPixels2D();
  Pixel currPixel = null;
  Pixel messagePixel = null;
  int count = 0;
  for (int row = 0; row < this.getHeight(); row++)
  {
  for (int col = 0; col < this.getWidth(); col++)
  {
  // if the current pixel red is odd make it even
  currPixel = currPixels[row][col];
  if (currPixel.getRed() % 2 == 1)
  currPixel.setRed(currPixel.getRed() - 1);
  messagePixel = messagePixels[row][col];
  if (messagePixel.colorDistance(Color.BLACK) < 50)
  {
  currPixel.setRed(currPixel.getRed() + 1);
  count++;
  }
  }
  }
  System.out.println(count);
  }
  /**
  * Method to decode a message hidden in the
  * red value of the current picture
  * @return the picture with the hidden message
  */
  /*public Picture decode()
  {
  Pixel[][] pixels = this.getPixels2D();
  int height = this.getHeight();
  int width = this.getWidth();
  Pixel currPixel = null;

  Pixel messagePixel = null;
  Picture messagePicture = new Picture(height,width);
  Pixel[][] messagePixels = messagePicture.getPixels2D();
  int count = 0;
  for (int row = 0; row < this.getHeight(); row++)
  {
  for (int col = 0; col < this.getWidth(); col++)
  {
  currPixel = pixels[row][col];
  messagePixel = messagePixels[row][col];
  if (currPixel.getRed() % 2 == 1)
  {
  messagePixel.setColor(Color.BLACK);
  count++;
  }
  }
  }
  System.out.println(count);
  return messagePicture;
  }*/
  public void encode(Picture messagePict){
	  Pixel[][] messagePixels = messagePict.getPixels2D();
	  Pixel[][] currPixels = this.getPixels2D();
	  Pixel currPixel = null;
	  Pixel messagePixel = null;
	  int count = 0;
	  for (int row = 0; row < this.getHeight(); row++){
		  for (int col = 0; col < this.getWidth(); col++){
			  // if the current pixel red is odd make it even
			  currPixel = currPixels[row][col];
			  if (currPixel.getRed() % 3 ==1 || currPixel.getBlue() % 3 == 1||currPixel.getGreen() % 3 == 1){
				  currPixel.setRed(currPixel.getRed() - 1);
				  currPixel.setGreen(currPixel.getGreen() - 1);
				  currPixel.setBlue(currPixel.getBlue() - 1);
			  }
			  else if (currPixel.getRed() % 3 ==2 || currPixel.getBlue() % 3 == 2||currPixel.getGreen() % 3 == 2){
				  currPixel.setRed(currPixel.getRed() - 2);
				  currPixel.setGreen(currPixel.getGreen() - 2);
				  currPixel.setBlue(currPixel.getBlue() - 2);
			  }
			  messagePixel = messagePixels[row][col];
			  if (messagePixel.colorDistance(Color.BLACK) < 50){
				  currPixel.setRed(currPixel.getRed() + 1);
				  currPixel.setGreen(currPixel.getGreen() + 1);
				  currPixel.setBlue(currPixel.getBlue() + 1);
				  count++;
			  }
		  }
	  }
  System.out.println(count);
  }
  /**
  * Method to decode a message hidden in the
  * red value of the current picture
  * @return the picture with the hidden message
  */
  public Picture decode()
  {
	  Pixel[][] pixels = this.getPixels2D();
	  int height = this.getHeight();
	  int width = this.getWidth();
	  Pixel currPixel = null;

	  Pixel messagePixel = null;
	  Picture messagePicture = new Picture(height,width);
	  Pixel[][] messagePixels = messagePicture.getPixels2D();
	  int count = 0;
	  for (int row = 0; row < this.getHeight(); row++){
		  for (int col = 0; col < this.getWidth(); col++){
			  currPixel = pixels[row][col];
			  messagePixel = messagePixels[row][col];
			  if (currPixel.getRed() % 3 !=0 || currPixel.getGreen() % 3 !=0||currPixel.getBlue() % 3 !=0)
			  {
				  messagePixel.setColor(Color.RED);
				  count++;
			  }
			  /*else if (currPixel.getRed() % 3 == 2 ||currPixel.getGreen() % 3 == 2||currPixel.getBlue() % 3 == 2)
			  {
				  messagePixel.setColor(Color.RED);
				  count++;
			  }*/
		  }
	  }
  System.out.println(count);
  	return messagePicture;
  }
  
  /* Main method for testing - each class in Java can have a main 
   * method 
   */
  /*public static void main(String[] args) 
  {
    Picture beach = new Picture("/Users/theandrealiu/Desktop/AP CSA/PicLab/src/images/beach.jpg");
    beach.explore();
    beach.zeroBlue();
    beach.explore();
  }*/
  
} // this } is the end of class Picture, put all new methods before this


